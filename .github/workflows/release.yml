name: Release Pipeline

permissions:
  packages: write
  deployments: write
  contents: write
  pull-requests: write

on:
  push:
    branches:
      - main
      - develop
    tags:
      - "v*"
  workflow_dispatch:

jobs:
  build-test:
    concurrency:
      group: build-test-${{ github.ref }}-${{ matrix.task }}
      cancel-in-progress: true
    name: Build and Test (${{ matrix.task }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        task: [build, test]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup pnpm
        uses: pnpm/action-setup@fe02b34f77f8bc703788d5817da081398fad5dd2 #v4.0.0
        with:
          version: latest

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run ${{ matrix.task }}
        run: |
          if [ "${{ matrix.task }}" == "build" ]; then
            pnpm run build
          else
            pnpm run test
          fi

  release:
    name: Semantic Release
    runs-on: ubuntu-latest
    needs: build-test
    outputs:
      version: ${{ steps.semantic-release.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          persist-credentials: false

      - name: Setup pnpm
        uses: pnpm/action-setup@fe02b34f77f8bc703788d5817da081398fad5dd2 #v4.0.0
        with:
          version: latest

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run Semantic Release
        id: semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.SEM_REL_TOKEN }}
        run: |
          pnpm dlx semantic-release --ci
          VERSION=$(cat VERSION || echo "")
          echo "Resolved version: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

  docker:
    concurrency:
      group: docker-${{ github.ref }}-${{ matrix.platform }}
      cancel-in-progress: true
    strategy:
      matrix:
        platform: [linux/amd64]
    name: Build and Push Docker Image (${{ matrix.platform }})
    needs: release
    if: ${{ needs.release.outputs.version != '' }}
    runs-on: ${{ (matrix.platform == 'linux/amd64') && 'ubuntu-latest' || (matrix.platform == 'linux/arm64') && 'ubuntu-24.04-arm'}}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker Metadata Action
        uses: docker/metadata-action@v4
        id: meta
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=semver,pattern=${{ github.ref_name }}
            type=raw,value=${{ needs.release.outputs.version }}
            type=raw,value=latest
            ${{ github.ref_name == 'main' && 'type=raw,value=prod' || '' }}
            ${{ github.ref_name == 'develop' && 'type=raw,value=devel' || '' }}
        
      - name: Build and Push Docker Image
        id: docker-build
        uses: docker/build-push-action@v4
        with:
          context: .
          file: Dockerfile
          push: true
          platforms: ${{ matrix.platform }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  trigger-devel:
      concurrency:
        group: trigger-devel-${{ github.ref }}
        cancel-in-progress: true
      name: Deploy to Development
      needs:
        - docker
        - release
      runs-on: ubuntu-latest
      if: ${{ (github.ref_name == 'develop' || github.ref_name == 'main') && (needs.docker.result == 'success' || needs.docker.result == 'skipped') }}
      environment: Staging
      steps:
        - name: Check out the repo
          uses: actions/checkout@v4

        - name: Install Deploys CLI
          run: scripts/install-deploys-cli.sh

        - name: Trigger Deployment
          run: |
            deploys deployment deploy \
              -project=tonklaw-projects \
              -location=gke.cluster-rcf2 \
              -name=development \
              -image=ghcr.io/${{ github.repository }}:${{ needs.release.outputs.version }}
          env:
            DEPLOYS_AUTH_USER: ${{ secrets.DEPLOYS_AUTH_USER }}
            DEPLOYS_AUTH_PASS: ${{ secrets.DEPLOYS_AUTH_PASS }}

  trigger-prod:
    concurrency:
      group: trigger-prod-${{ github.ref }}
      cancel-in-progress: true
    name: Deploy to Production
    needs:
      - docker
      - release
    runs-on: ubuntu-latest
    if: ${{ github.ref_name == 'main' && (needs.docker.result == 'success' || needs.docker.result == 'skipped') }}
    environment: Production
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Install Deploys CLI
        run: scripts/install-deploys-cli.sh

      - name: Trigger Deployment
        run: |
          deploys deployment deploy \
            -project=buddyrental-api \
            -location=gke.cluster-rcf2 \
            -name=production \
            -image=ghcr.io/${{ github.repository }}:${{ needs.release.outputs.version }}
        env:
          DEPLOYS_AUTH_USER: ${{ secrets.DEPLOYS_AUTH_USER }}
          DEPLOYS_AUTH_PASS: ${{ secrets.DEPLOYS_AUTH_PASS }}
